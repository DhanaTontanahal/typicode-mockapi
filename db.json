{
    "mockApi": {
        "profile": {
            "profileName":"Dan Abramov",
            "profileDesc":"Working on @reactjs. Co-author of Redux and Create React App. Building tools for humans.",
            "followersCount":"3232342",
            "followingCount":"653",
            "twitterUrl":"https://twitter.com/dan_abramov",
            "profileUrl":"https://miro.medium.com/fit/c/128/128/1*xxVEfOOAmIKHWOUloRKLhw.jpeg"

        },
        "data": [
            {
                "id": "1001",
                "title": "React reloading",
                "subHeader": "Feb 17, 2019 · 2 min read",
                "avatarText": "D",
                "responseCount": "12",
                "clapCount": "14",
                "cardContentVariant": "body2",
                "cardContentHeading": "Live Reloading in React",
                "content": "Note: React Hot Loader 3, released a month after I published this article, solves most of the problems described in this post. Give it a try! React Transform is an experimental project I started after giving the Hot Reloading with Time Travel talk at React Europe.My goal was to bring a live editing environment that preserves component state and handles errors gracefully to as many React users as possible.By all reasonable metrics, React Transform has been a success. If anything, it proved the demand for a better development experience.I would even say it has been way too popular for such an experimental and unpolished piece of software. This caused some pain for the people who felt pressured to adopt it and experienced problems with configuration.I am sorry about this, as I had no time to focus on the experience of setting up the tool. There were, and still are, too many low level problems that need to be solved first before addressing the high level problems.",
                "color": "textSecondary",
                "cardImage": "https://miro.medium.com/fit/c/700/210/1*YkswLJFKt-PoS9-9YP6uag.png"
            },
            {
                "id": "1002",
                "title": "Redux ?",
                "subHeader": "July 17, 2020 · 2 min read",
                "avatarText": "D",
                "responseCount": "100",
                "clapCount": "142",
                "cardContentVariant": "body2",
                "cardContentHeading": "You Might Not Need Redux",
                "content": "Redux offers a tradeoff. It asks you to:Describe application state as plain objects and arrays.Describe changes in the system as plain objects.Describe the logic for handling changes as pure functions. None of these limitations are required to build an app, with or without React. In fact these are pretty strong constraints, and you should think carefully before adopting them even in parts of your app.",
                "color": "textSecondary",
                "cardImage": "https://miro.medium.com/fit/c/700/210/1*_XMyHqfFSyw03BiNjBoV3Q.jpeg"
            },
            {
                "id": "1003",
                "title": "The Hooks",
                "subHeader": "Aug 17, 2012 · 2 min read",
                "avatarText": "D",
                "responseCount": "12",
                "clapCount": "14",
                "cardContentVariant": "body2",
                "cardContentHeading": "Making Sense of React Hooks",
                "content": "We know that components and top-down data flow help us organize a large UI into small, independent, reusable pieces. However, we often can’t break complex components down any further because the logic is stateful and can’t be extracted to a function or another component. Sometimes that’s what people mean when they say React doesn’t let them “separate concerns.”",
                "color": "textSecondary",
                "cardImage": "https://miro.medium.com/max/360/1*-EWCLp3L61waWLPTOH9Rkg.png"
            },
            {
                "id": "1004",
                "title": "P & C Components",
                "subHeader": "Feb 23, 2015 · 2 min read",
                "avatarText": "D",
                "responseCount": "100",
                "clapCount": "142",
                "cardContentVariant": "body2",
                "cardContentHeading": "Presentational and Container Components",
                "content": "You/'ll find your components much easier to reuse and reason about if you divide them into two categories. I call them Container and Presentational components but I also heard Fat and Skinny, Smart and Dumb, Stateful and Pure, Screens and Components, etc. These all are not exactly the same, but the core idea is similar.",
                "color": "textSecondary",
                "cardImage": "https://miro.medium.com/fit/c/700/210/1*TatfeANQMBmjrk_nhKbZoA.jpeg"
            }
        ]
    }
    
   
}